#!/usr/bin/env perl
use warnings;
use strict;

#DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

=pod

=head1 NAME

run_weka.pl - Classify variants using WEKA machine-learning framework

=head1 SYNOPSIS

run_weka.pl [options] infile [>outfile]

where options are:

  -l model    use WEKA binary model specified instead of default HumDiv
              (full pathname to the model file required); the only
              alternative model currently supported is HumVar, e.g.:
                -l $PPH/models/HumVar.UniRef100.NBd.f11.model

  -h          display extended help

=head1 DESCRIPTION

Input file should be a tab-delimited variant annotation summary report
generated by run_pph.pl script.

Advanced options (EXPERIMENTAL, disabled in production version):

  -f N      use one of the available preselected sets of features
            for the model: N=[8,11,12,33,44]; default N=11

  -F LIST   specify user-supplied list of features for the model

  -c METHOD use the method specified instead of the default
            Naive Bayes with supervised discretization (NBd)

=head1 AUTHORS

Ivan Adzhubey

=head1 SUBVERSION

 $LastChangedDate: 2012-02-22 23:27:04 -0500 (Wed, 22 Feb 2012) $
 $LastChangedRevision: 394 $
 $LastChangedBy: ivan $

=cut

#DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

use Getopt::Std;
use Pod::Usage;
use File::Basename;

# Probability thresholds for which statistics were approximated (n=201)
my @thresholds = qw( 0 0.005 0.01 0.015 0.02 0.025 0.03 0.035 0.04 0.045 0.05 0.055 0.06 0.065 0.07 0.075 0.08 0.085 0.09 0.095 0.1 0.105 0.11 0.115 0.12 0.125 0.13 0.135 0.14 0.145 0.15 0.155 0.16 0.165 0.17 0.175 0.18 0.185 0.19 0.195 0.2 0.205 0.21 0.215 0.22 0.225 0.23 0.235 0.24 0.245 0.25 0.255 0.26 0.265 0.27 0.275 0.28 0.285 0.29 0.295 0.3 0.305 0.31 0.315 0.32 0.325 0.33 0.335 0.34 0.345 0.35 0.355 0.36 0.365 0.37 0.375 0.38 0.385 0.39 0.395 0.4 0.405 0.41 0.415 0.42 0.425 0.43 0.435 0.44 0.445 0.45 0.455 0.46 0.465 0.47 0.475 0.48 0.485 0.49 0.495 0.5 0.505 0.51 0.515 0.52 0.525 0.53 0.535 0.54 0.545 0.55 0.555 0.56 0.565 0.57 0.575 0.58 0.585 0.59 0.595 0.6 0.605 0.61 0.615 0.62 0.625 0.63 0.635 0.64 0.645 0.65 0.655 0.66 0.665 0.67 0.675 0.68 0.685 0.69 0.695 0.7 0.705 0.71 0.715 0.72 0.725 0.73 0.735 0.74 0.745 0.75 0.755 0.76 0.765 0.77 0.775 0.78 0.785 0.79 0.795 0.8 0.805 0.81 0.815 0.82 0.825 0.83 0.835 0.84 0.845 0.85 0.855 0.86 0.865 0.87 0.875 0.88 0.885 0.89 0.895 0.9 0.905 0.91 0.915 0.92 0.925 0.93 0.935 0.94 0.945 0.95 0.955 0.96 0.965 0.97 0.975 0.98 0.985 0.99 0.995 1 );

# Approximated statistics for HumDiv and HumVar models
my %statistics = (
  'HumDiv.UniRef100' => { # updated
    FPR => [ qw( 1 0.259741 0.225766 0.209062 0.19811 0.189309 0.181551 0.177102 0.173233 0.169386 0.165787 0.163308 0.16123 0.158509 0.156861 0.154765 0.153528 0.151083 0.14893 0.146988 0.145206 0.143746 0.142857 0.14189 0.140735 0.140135 0.13908 0.137829 0.136315 0.135429 0.134023 0.133079 0.13198 0.131385 0.130636 0.129608 0.128845 0.127736 0.126925 0.125879 0.125162 0.124226 0.123394 0.122563 0.121998 0.121236 0.121104 0.120706 0.119777 0.119247 0.11845 0.118318 0.117686 0.11712 0.116328 0.11593 0.115784 0.115128 0.114627 0.113923 0.11341 0.112614 0.112482 0.111819 0.111546 0.111421 0.111288 0.110781 0.110094 0.109489 0.1089 0.108768 0.10837 0.107839 0.107839 0.10713 0.106388 0.105906 0.105484 0.105231 0.104825 0.104578 0.103462 0.103197 0.102931 0.102799 0.102278 0.101897 0.100809 0.100255 0.100013 0.099483 0.0994343 0.09935 0.098952 0.098687 0.098554 0.098024 0.0978352 0.096962 0.096565 0.0965589 0.096299 0.096167 0.096034 0.095901 0.095371 0.0951146 0.094973 0.0947454 0.0946643 0.09431 0.094177 0.093912 0.0938102 0.0936615 0.0934734 0.093116 0.0927241 0.0919341 0.0918363 0.091657 0.091126 0.090728 0.090198 0.089402 0.089136 0.089004 0.088739 0.0881154 0.0878434 0.087014 0.086484 0.0858917 0.085157 0.084892 0.084494 0.0836015 0.082902 0.0828111 0.0822982 0.0819131 0.081443 0.0811101 0.080249 0.079719 0.0795502 0.079321 0.07879 0.0784473 0.077617 0.077199 0.0769053 0.076535 0.0759191 0.075342 0.0747182 0.074413 0.073485 0.0730441 0.072423 0.0722 0.071097 0.070832 0.070036 0.069638 0.06924 0.0687396 0.068311 0.0675624 0.067383 0.067118 0.0666297 0.066189 0.0656816 0.065261 0.0646998 0.064067 0.0638821 0.063138 0.0627004 0.061945 0.060883 0.0601298 0.0591871 0.058255 0.057827 0.057037 0.055976 0.053986 0.05266 0.050537 0.0483068 0.046956 0.044568 0.04364 0.040456 0.037538 0.033824 0.0276521 0.000265 ) ],
    TPR => [ qw( 1 0.968368 0.959561 0.955607 0.952013 0.948958 0.94716 0.945183 0.943672 0.941956 0.94087 0.939792 0.937815 0.936729 0.935119 0.933681 0.932962 0.932243 0.931524 0.930266 0.929341 0.928109 0.927695 0.927211 0.926205 0.925593 0.924874 0.923976 0.923077 0.922273 0.921459 0.92092 0.920097 0.920022 0.919123 0.918584 0.918224 0.917504 0.917146 0.916347 0.915708 0.915349 0.915349 0.914526 0.914091 0.91297 0.912315 0.911915 0.911754 0.911566 0.910855 0.910758 0.909957 0.909597 0.908725 0.908138 0.90762 0.907261 0.906722 0.906183 0.905398 0.904605 0.903709 0.903405 0.902948 0.902479 0.901763 0.90151 0.900369 0.899712 0.899456 0.898678 0.897806 0.897719 0.897575 0.897196 0.896657 0.896477 0.896298 0.895579 0.89468 0.894321 0.893694 0.893076 0.892413 0.891815 0.891625 0.891445 0.890534 0.889288 0.888835 0.888524 0.88803 0.887569 0.886928 0.886536 0.886332 0.88545 0.884795 0.88412 0.883626 0.883178 0.883177 0.882762 0.882279 0.881464 0.881058 0.880661 0.879703 0.879403 0.878864 0.877924 0.877245 0.877019 0.87639 0.875809 0.87527 0.874697 0.874191 0.873652 0.873293 0.873008 0.871893 0.871249 0.870248 0.86915 0.867543 0.866808 0.866475 0.866463 0.866104 0.865397 0.864233 0.863767 0.862953 0.862187 0.861841 0.861431 0.860459 0.860173 0.859274 0.859094 0.858106 0.857656 0.857094 0.856429 0.85496 0.854337 0.853564 0.853163 0.852804 0.852037 0.851725 0.850942 0.849928 0.848768 0.847951 0.847354 0.846093 0.844716 0.843063 0.84184 0.840752 0.840312 0.839152 0.838242 0.837088 0.836449 0.83578 0.834651 0.833524 0.831712 0.830877 0.82877 0.827642 0.82627 0.824407 0.822659 0.821352 0.820066 0.818116 0.816011 0.814345 0.812545 0.810208 0.807725 0.805356 0.802648 0.799305 0.795886 0.7906 0.78594 0.780733 0.776423 0.768963 0.761682 0.752937 0.739999 0.718638 0.681344 0.00018 ) ],
    FDR => [ qw( 0.575364 0.266558 0.241733 0.228651 0.219945 0.212786 0.206172 0.202478 0.199189 0.195918 0.192736 0.19058 0.188934 0.186516 0.185195 0.183404 0.18232 0.180053 0.178056 0.17634 0.174718 0.173455 0.172632 0.171738 0.170732 0.170222 0.169267 0.168135 0.166731 0.165948 0.164629 0.163739 0.16273 0.162126 0.161483 0.160496 0.159754 0.158702 0.157905 0.156923 0.156261 0.155326 0.154446 0.153682 0.153144 0.152492 0.152443 0.152075 0.151105 0.150562 0.149806 0.149678 0.149109 0.148549 0.147814 0.147464 0.147376 0.146713 0.146243 0.145549 0.145096 0.144333 0.14431 0.143623 0.143386 0.143311 0.143262 0.142737 0.142132 0.141549 0.14093 0.140888 0.140562 0.139982 0.140001 0.13926 0.1385 0.137982 0.137532 0.137343 0.137004 0.136773 0.135593 0.135373 0.135159 0.135087 0.134519 0.134109 0.132985 0.132512 0.132293 0.131723 0.131731 0.131694 0.131318 0.131062 0.130935 0.130435 0.130301 0.129375 0.128975 0.129025 0.128724 0.128622 0.128528 0.128477 0.127908 0.127659 0.127614 0.127385 0.127358 0.12706 0.12699 0.126706 0.126666 0.126564 0.12641 0.126059 0.125659 0.124789 0.124718 0.12454 0.124047 0.123653 0.123142 0.122324 0.122204 0.122135 0.121856 0.121106 0.120821 0.119903 0.119401 0.118737 0.117939 0.117708 0.117262 0.116216 0.115471 0.115393 0.114866 0.114412 0.113946 0.113586 0.112582 0.111998 0.111958 0.111744 0.111169 0.110785 0.109783 0.109342 0.109008 0.108629 0.107964 0.107361 0.10666 0.106337 0.10529 0.104877 0.104262 0.104109 0.102801 0.102505 0.101596 0.101176 0.100781 0.100195 0.0997042 0.0988389 0.0987227 0.0985655 0.0980078 0.0976463 0.0970892 0.0966722 0.0961172 0.0954494 0.0953373 0.0944661 0.0940752 0.0932641 0.0919837 0.0911315 0.0900671 0.0890228 0.0886637 0.087828 0.0866649 0.0841724 0.082779 0.0801435 0.0773518 0.0757378 0.0728138 0.0720386 0.0678632 0.064313 0.0599506 0.0521236 0.010929 ) ]
  },
  'HumVar.UniRef100' => { # updated
    FPR => [ qw( 1 0.560791 0.49837 0.464296 0.441197 0.423383 0.407175 0.395445 0.384796 0.376995 0.368832 0.360593 0.353632 0.348234 0.343524 0.338971 0.33344 0.328874 0.324721 0.321142 0.317123 0.312924 0.309406 0.306137 0.302207 0.299425 0.297661 0.294712 0.292319 0.289705 0.286964 0.284402 0.281182 0.278909 0.276799 0.274221 0.271759 0.270234 0.268302 0.266503 0.264641 0.262714 0.26153 0.260228 0.257553 0.256479 0.254863 0.253304 0.251965 0.250537 0.249219 0.247656 0.246141 0.24439 0.242779 0.241045 0.239912 0.238995 0.237442 0.236332 0.234681 0.233433 0.232456 0.230686 0.229355 0.228261 0.226757 0.225644 0.224111 0.222938 0.221422 0.220554 0.219404 0.21809 0.216735 0.215645 0.214559 0.213657 0.212662 0.21171 0.210721 0.20949 0.2084 0.207974 0.206755 0.205465 0.204612 0.203232 0.202042 0.200646 0.199261 0.198077 0.196752 0.195662 0.19481 0.19391 0.192963 0.192064 0.191259 0.189933 0.189128 0.188039 0.187423 0.186665 0.185644 0.184582 0.183682 0.182635 0.181701 0.180367 0.17871 0.177858 0.176626 0.175883 0.17509 0.174259 0.1732 0.172317 0.171323 0.170573 0.16976 0.168371 0.16744 0.166408 0.165499 0.164694 0.163415 0.16259 0.161179 0.16041 0.159911 0.159106 0.158112 0.156978 0.155839 0.154676 0.153708 0.152785 0.151814 0.150867 0.149825 0.14883 0.148083 0.147089 0.146427 0.145378 0.143953 0.142722 0.141727 0.140875 0.140307 0.13903 0.137892 0.137087 0.136377 0.134956 0.133914 0.132701 0.131262 0.130011 0.129037 0.128137 0.126742 0.125959 0.124586 0.123686 0.12236 0.121 0.119614 0.118146 0.117009 0.115873 0.114589 0.113221 0.111564 0.11019 0.108505 0.10696 0.105739 0.103912 0.102756 0.101146 0.0998325 0.0975195 0.095416 0.093427 0.0916942 0.089308 0.0872699 0.0853847 0.082946 0.0799722 0.0777837 0.074534 0.0715869 0.067052 0.0617198 0.0569895 0.0498685 0.03793 0 ) ],
    TPR => [ qw( 1 0.971752 0.961164 0.953911 0.949225 0.944656 0.939719 0.935872 0.933231 0.930123 0.927849 0.925703 0.923178 0.921439 0.91976 0.918048 0.91557 0.913633 0.911606 0.909984 0.908068 0.906199 0.904938 0.903534 0.901807 0.900252 0.89912 0.897189 0.896198 0.895077 0.893855 0.892844 0.891467 0.890016 0.888989 0.887558 0.886462 0.885159 0.884002 0.88326 0.882006 0.881188 0.880119 0.878987 0.877953 0.876554 0.875924 0.875158 0.87421 0.87268 0.871931 0.870896 0.869626 0.868985 0.868004 0.867228 0.866192 0.864935 0.863669 0.862948 0.862025 0.861011 0.860087 0.858848 0.858037 0.857046 0.85628 0.855289 0.854163 0.853088 0.851991 0.851099 0.850333 0.849522 0.848471 0.847776 0.84709 0.846275 0.845555 0.844522 0.843279 0.841825 0.840975 0.84007 0.83898 0.837928 0.837096 0.836502 0.835826 0.83515 0.834055 0.832923 0.831928 0.830831 0.829949 0.828672 0.827753 0.826881 0.826353 0.825591 0.824981 0.824149 0.823453 0.822531 0.82195 0.821018 0.820044 0.818976 0.818436 0.817445 0.816502 0.815733 0.814381 0.813885 0.812894 0.811866 0.810191 0.809293 0.807988 0.806902 0.805952 0.804649 0.803472 0.802307 0.801315 0.800105 0.798929 0.797756 0.79663 0.795278 0.794382 0.793334 0.79174 0.790593 0.789335 0.788045 0.786808 0.786223 0.784592 0.78316 0.782159 0.780991 0.779915 0.778564 0.776948 0.775635 0.773862 0.772397 0.771028 0.769942 0.768869 0.767391 0.765877 0.763779 0.762571 0.7608 0.758573 0.756398 0.75463 0.752729 0.750972 0.749497 0.747162 0.745337 0.743533 0.741382 0.738589 0.735988 0.7327 0.730491 0.727278 0.72407 0.722112 0.719326 0.716288 0.713247 0.709858 0.707064 0.703766 0.700442 0.696125 0.69273 0.688457 0.683456 0.679137 0.675212 0.669085 0.664142 0.6571 0.650523 0.643629 0.635114 0.626689 0.616806 0.605154 0.589919 0.571833 0.548522 0.51311 0.450381 4.5e-05 ) ],
    FDR => [ qw( 0.487556 0.354449 0.330353 0.316515 0.306626 0.298944 0.291911 0.286743 0.281765 0.278308 0.27442 0.270401 0.267107 0.264473 0.262185 0.25997 0.257334 0.255111 0.253123 0.251368 0.2494 0.247297 0.245456 0.24378 0.241756 0.24038 0.239532 0.238112 0.236837 0.235442 0.23398 0.232578 0.230826 0.229676 0.228539 0.227176 0.225812 0.225087 0.224065 0.223043 0.222076 0.220976 0.220408 0.219771 0.218206 0.217765 0.216812 0.21592 0.215208 0.214544 0.213801 0.212944 0.212161 0.211093 0.210181 0.209142 0.208561 0.208169 0.207337 0.206704 0.205733 0.205055 0.204546 0.203539 0.202755 0.202169 0.201249 0.200645 0.199764 0.199128 0.198247 0.197789 0.197103 0.196304 0.195518 0.194855 0.19419 0.193682 0.193087 0.192579 0.19208 0.191439 0.19079 0.19064 0.189934 0.189165 0.18868 0.187755 0.186983 0.186054 0.185206 0.184512 0.183683 0.183049 0.182556 0.182095 0.181532 0.180995 0.180468 0.179577 0.179061 0.178361 0.178005 0.177576 0.176879 0.17621 0.175674 0.175036 0.174391 0.173507 0.172352 0.171805 0.171053 0.170543 0.170076 0.169584 0.169017 0.168456 0.167872 0.167447 0.166947 0.166031 0.165467 0.164815 0.164231 0.16377 0.162906 0.162416 0.161425 0.161008 0.16074 0.160238 0.159665 0.158896 0.158137 0.15736 0.156736 0.156039 0.155474 0.154893 0.154155 0.153483 0.153008 0.152361 0.152047 0.15134 0.150371 0.149518 0.148856 0.148271 0.147937 0.14703 0.146248 0.14586 0.14541 0.144401 0.143807 0.143042 0.141995 0.141138 0.14051 0.139904 0.138964 0.138516 0.137501 0.136985 0.13616 0.135263 0.13444 0.133358 0.132752 0.132138 0.131174 0.130249 0.129062 0.128151 0.126966 0.125818 0.125071 0.123689 0.123147 0.121975 0.121239 0.119529 0.117911 0.116332 0.115348 0.113428 0.112185 0.111017 0.109222 0.106985 0.105618 0.103114 0.101164 0.097589 0.0931279 0.0899578 0.0846414 0.0741827 0 ) ]
  }
);

# v2.0.23 (2010-12-09):
#   HumDiv.UniRef100:  5% FPR, 66% TPR, Probability threshold: 0.987
#   HumDiv.UniRef100: 10% FPR, 80% TPR, Probability threshold: 0.841
#   HumDiv.UniRef100: 20% FPR, 93% TPR, Probability threshold: 0.067
#
#   HumVar.UniRef100:  5% FPR, 40% TPR, Probability threshold: 0.991
#   HumVar.UniRef100: 10% FPR, 58% TPR, Probability threshold: 0.964
#   HumVar.UniRef100: 20% FPR, 76% TPR, Probability threshold: 0.746
#
# v2.1.0 (2011-04-20):
#   HumDiv.UniRef100:  5% FPR, 78% TPR, Probability threshold: 0.953
#   HumDiv.UniRef100: 10% FPR, 89% TPR, Probability threshold: 0.432
#   HumDiv.UniRef100: 20% FPR, 96% TPR, Probability threshold: 0.024
#
#   HumDiv.Swiss-Prot:  5% FPR, 67% TPR, Probability threshold: 0.964
#   HumDiv.Swiss-Prot: 10% FPR, 80% TPR, Probability threshold: 0.765
#   HumDiv.Swiss-Prot: 20% FPR, 91% TPR, Probability threshold: 0.213
#
#   HumVar.UniRef100:  5% FPR, 53% TPR, Probability threshold: 0.981
#   HumVar.UniRef100: 10% FPR, 68% TPR, Probability threshold: 0.902
#   HumVar.UniRef100: 20% FPR, 83% TPR, Probability threshold: 0.493
#
#   HumVar.Swiss-Prot:  5% FPR, 51% TPR, Probability threshold: 0.960
#   HumVar.Swiss-Prot: 10% FPR, 65% TPR, Probability threshold: 0.864
#   HumVar.Swiss-Prot: 20% FPR, 79% TPR, Probability threshold: 0.565
#
# v2.2.1 (2011_10):
#   HumDiv.UniRef100:
#      5% FPR, 79% TPR, Probability threshold: 0.931
#     10% FPR, 90% TPR, Probability threshold: 0.451
#     20% FPR, 95% TPR, Probability threshold: 0.0290
#   HumVar.UniRef100:
#      5% FPR, 49% TPR, Probability threshold: 0.978
#     10% FPR, 68% TPR, Probability threshold: 0.903
#     20% FPR, 83% TPR, Probability threshold: 0.542
#
# v2.2.2 (2011_12):
#   HumDiv.UniRef100:
#      5% FPR, 78% TPR, Probability threshold: 0.957
#     10% FPR, 89% TPR, Probability threshold: 0.452
#     20% FPR, 95% TPR, Probability threshold: 0.0195
#   HumVar.UniRef100:
#      5% FPR, 51% TPR, Probability threshold: 0.990
#     10% FPR, 69% TPR, Probability threshold: 0.909
#     20% FPR, 83% TPR, Probability threshold: 0.446
#
# HumDiv models use  5% / 10% FPR for "probably damaging" / "possibly damaging" thresholds
# HumVar models use 10% / 20% FPR for "probably damaging" / "possibly damaging" thresholds
#
my %classifier_thresholds = (
  'HumDiv.UniRef100'  => [ qw(0.957 0.452) ], # updated
  'HumVar.UniRef100'  => [ qw(0.909 0.446) ]  # updated
);

BEGIN {
  $Getopt::Std::STANDARD_HELP_VERSION = 1;
  use FindBin qw($RealBin);
  BEGIN {
    unless ($ENV{'PPH'}) {
      my $binpath = $RealBin;
      $binpath =~ s|/[^/]+$||;
      $ENV{'PPH'} = $binpath;
    }
  }
  use lib "$ENV{PPH}/perl";
}

use Math::Interpolate qw{linear_interpolate};
use PPH::Config;
use PPH;

my $featureset = 'f11';
my $WEKA_PATH  = $CONFIG{'WEKA'};
my $PRJ_PATH   = $CONFIG{'PPH'};

my %opt;
pod2usage('ERROR: No arguments specified') unless @ARGV;
getopts('hc:f:F:l:', \%opt) or pod2usage('ERROR: Wrong argument(s)');
pod2usage(-verbose=>2) if $opt{'h'};
pod2usage('ERROR: No input file specified') unless @ARGV;
# die "Illegal option\n" unless getopts('c:f:F:l:', \%opt);
if (defined $opt{'f'}) {
  die "-F and -f options cannot be simultaneously specified\n" if $opt{'F'};
  if    ($opt{'f'} == 33) { $featureset = 'f33'; }
  elsif ($opt{'f'} == 12) { $featureset = 'f12'; }
  elsif ($opt{'f'} == 11) { $featureset = 'f11'; }
  elsif ($opt{'f'} ==  8) { $featureset = 'f8'; }
  else  { die("Unsupported feature set: ".$opt{'f'}."\n") unless scalar @ARGV > 1; }
}
my @featurelist;
if (defined $opt{'F'}) {
  die "-F and -f options cannot be simultaneously specified\n" if $opt{'f'};
  @featurelist = split /,/, $opt{'F'};
  die "Invalid features list: ".$opt{'F'}."\n" unless scalar @featurelist > 2;
  $featureset = 'F' . $#featurelist;  # F-code is one minus the list length (mandatory class attribute)
}
my $sumfile = shift @ARGV;
die "PPH summary file not specified\n" unless defined $sumfile;
die "PPH summary file does not exist: $sumfile\n" unless -e $sumfile;
# Default model is Naive Bayes on 11 feat. w/discretization built with HumDiv vs. UniRef100
my $modelfile = $opt{'l'} || "$PRJ_PATH/models/HumDiv.UniRef100.NBd.f11.model";
my $modelname = 'HumDiv.UniRef100';
die "WEKA model file not specified\n" unless defined $modelfile;
die "WEKA model file does not exist: $modelfile\n" unless -e $modelfile;
if ($opt{'l'}) {
  if      ($modelfile =~ /HumDiv/ && $modelfile =~ /UniRef100/) {
    $modelname = 'HumDiv.UniRef100';
  } elsif ($modelfile =~ /HumDiv/ && $modelfile =~ /Swiss-Prot/) {
    $modelname = 'HumDiv.Swiss-Prot';
  } elsif ($modelfile =~ /HumVar/ && $modelfile =~ /UniRef100/) {
    $modelname = 'HumVar.UniRef100';
  } elsif ($modelfile =~ /HumVar/ && $modelfile =~ /Swiss-Prot/) {
    $modelname = 'HumVar.Swiss-Prot';
  } else {
    # Note, unsupported models will default to using HumDiv.UniRef100
    # approximations for the FPR/TPR/FDR scores
    warn "WARNING: Unsupported WEKA model: $modelfile\n";
  }
}
my $weka_command;
if ($opt{'c'}) {
  # Naive Bayes with discretization
  if      ($opt{'c'} eq 'NBd') {
    $weka_command = 'weka.classifiers.bayes.NaiveBayes';
  # Alternating Decision Tree
  } elsif ($opt{'c'} eq 'ADT') {
    $weka_command = 'weka.classifiers.trees.ADTree';
  # Functional Tree
  } elsif ($opt{'c'} eq 'FT') {
   $weka_command = 'weka.classifiers.trees.FT';
  # Random Forest
  } elsif ($opt{'c'} eq 'RF') {
   $weka_command = 'weka.classifiers.trees.RandomForest';
  # Decision Tree
  } elsif ($opt{'c'} eq 'DT') {
   $weka_command = 'weka.classifiers.trees.J48';
  # Supprot Vector Machine
  } elsif ($opt{'c'} eq 'SVM') {
   $weka_command = 'weka.classifiers.functions.SMO';
  # Logistic Regression
  } elsif ($opt{'c'} eq 'LR') {
   $weka_command = 'weka.classifiers.functions.Logistic';
  } else {
    die "Unsupported WEKA classifier name: $opt{'c'}\n";
  }
} else {
  # Default is NBd (Naive Bayes with discretization)
  $weka_command = 'weka.classifiers.bayes.NaiveBayes';
  $opt{'c'} = 'NBd';
}

my $fullset = 33;
my $testfile;
my $testarff;
# Optional input file in arff format specified
if (@ARGV) {
  $testfile = shift @ARGV;
  die "File does not exist: $testfile\n" unless -e $testfile;
  $testarff = 1;
# List of feature indices specified
} elsif (@featurelist) {
  my $basename = fileparse($sumfile, '.output');
  $testfile = "$basename.$featureset.arff";
  unlink $testfile if -e $testfile;
  my @system = ("$PRJ_PATH/bin/pph2arff.pl", '-f'.$fullset, $sumfile);
  my $rc = system @system;
  my $flist = join(',', @featurelist);
  my $fullfile = "$basename.f$fullset.arff";
  die "ERROR: pph2arff.pl failed\n" unless $rc == 0;
  my $cmd = "java -Xmx1024m -cp $WEKA_PATH/weka.jar weka.filters.unsupervised.attribute.Remove " .
            "-V -R $flist -i $fullfile -o $testfile";
  $rc = `$cmd 2>&1`;
  # Java always outputs at least a newline
  $rc =~ s/^\s+$//;
  die "ERROR: WEKA arff subset failed:\n$rc\n" if length $rc;
  die "ERROR: WEKA arff subset failed: $!\n" if $?;
  unlink $fullfile;
# Convert input file to arff format with a predefined featureset
} else {
  my $basename = fileparse($sumfile, '.output');
  $testfile = "$basename.$featureset.arff";
  unlink $testfile if -e $testfile;
  my @system = "$PRJ_PATH/bin/pph2arff.pl";
  push @system, '-'.$featureset, $sumfile;
  my $rc = system @system;
  die "ERROR: pph2arff.pl failed\n" unless $rc == 0;
}

# Silently skip running WEKA classifier and parsing its output if
# input arff file happens to be empty (see comments in pph2arff.pl);
# this should only happen if PPH file contained nothing but error/warning
# messages, in which case running classifier on it does not make sense.
my @predicted;
my @prediction;
my $inst_ordinal = 1;
if (-s $testfile) {
  my @rs = `java -Xmx1024m -cp $WEKA_PATH/weka.jar $weka_command -l $modelfile -o -p 0 -T $testfile 2>&1`;
  die "Failed to execute classifier: $!\n" unless @rs;
  my $ptr = 0;
  while ($ptr <= $#rs) {
    $_ = $rs[$ptr++];
    last if /^=== Predictions on test data ===/;
  }
  die("Failed to parse classifier output:\n" . join('', @rs)) if $ptr > $#rs;
  $ptr++; # skip empty line
  die ("Invalid classifier output:\n" . join('', @rs))
    unless $rs[$ptr++] =~ /^\s*inst#\s+actual\s+predicted/;
  foreach (@rs[$ptr..$#rs]) {
    chomp;
    s/^\s+//;
    s/\s+$//;
    next if /^\s*$/;
    my ($inst, $actual, $predicted, $error, $prediction) = split /\s+/, $_, 6;
    # Error field is empty if prediction is correct, hence prediction score
    # is split into "error" variable in this case.
    $prediction = $error unless defined $prediction;
    die "Discontinuous instance ordinal: $_\n" unless $inst == $inst_ordinal;
    $actual =~ s/^\d+://; $predicted =~ s/^\d+://;
    if    ($predicted =~ /^NEUTRAL/i)   { $predicted = 'neutral'; }
    elsif ($predicted =~ /^DELETERI/i)  { $predicted = 'deleterious'; }
    else  { die "Unsupported prediction class value: $_\n"; }
    # Note that the prediction score (probability) refers to the event denoted by
    # contents of "predicted" column, i.e. the probability of predicting as either
    # DELETERIOUS or NEUTRAL instance. We have to correct for this and always
    # output probability of classification as DELETERIOUS.
    $prediction = 1 - $prediction if $predicted eq 'neutral';
    push @predicted, $predicted;
    push @prediction, $prediction;
    $inst_ordinal++;
  }
}

open(FH, $sumfile) or die "Can't open PPH2 summary file: $sumfile\n";

# Print output header
my @header = PPH::return_header(-formatted=>1);
print
  '#', join("\t", @header[0..13]),
  sprintf("\t%18s\t%10s\t%10s\t%10s\t%10s\t",
    'pph2_class', 'pph2_prob', 'pph2_FPR', 'pph2_TPR', 'pph2_FDR'),
  join("\t", @header[14..$#header]), "\n";

$inst_ordinal = 1;
while (<FH>) {
  # Skip comments
  next if /^#/;
  # Skip lines with errors & warnings and empty lines
  # (Note, all errors should normally only go to STDERR
  # but LEON for instance outputs its error messages to
  # STDOUT for some reason, so we need to clean it up)
  next if /\tError:\s/;
  next if /^(ERROR|WARNING):\s/;
  next if /^\s*$/;
  chomp;
  # Trim comments if present
  my $comments = $1 if s/\s *#\s*(.+)$//;
  my @cols = split /\t/, $_, 51; # preserve any trailing empty fields
  map { s/^\s+//; s/\s+$//; } @cols;
  # Print dummy WEKA class/scores and then skip the lines with 'unknown' PPH1 outcome
  if ($cols[11] eq 'unknown' && $cols[17] eq '') {
    my @formatted;
    for (my $i=0; $i<@cols; $i++) {
      push @formatted, sprintf($PPH::tabformat[$i], $cols[$i]);
    }
    print
      join("\t", @formatted[0..13]),
      sprintf("\t%18s\t%10s\t%10s\t%10s\t%10s\t",
        'none', '', '', '', ''),
      join("\t", @formatted[14..$#formatted]);
    print "\t# $comments" if defined $comments;
    print "\n";
    next;
  }
  my $class = shift @predicted;
  my $prob  = shift @prediction;
  my $pp = $prob || 2.220446e-16;
  die "Classification missing in input at line ($inst_ordinal):\n" . $_ . "\n" unless $class;
  die "Probability missing in input at line ($inst_ordinal):\n" . $_ . "\n" unless defined $prob;
  my $fpr = linear_interpolate($pp, \@thresholds, $statistics{$modelname}{FPR});
  my $tpr = linear_interpolate($pp, \@thresholds, $statistics{$modelname}{TPR});
  my $fdr = linear_interpolate($pp, \@thresholds, $statistics{$modelname}{FDR});
  # Obtain ternary classification for the model, based on known distribution of its probability scores
  my $prediction;
  if      ($prob >= $classifier_thresholds{$modelname}->[0]) {
    $prediction = 'probably damaging';
  } elsif ($prob >= $classifier_thresholds{$modelname}->[1]) {
    $prediction = 'possibly damaging';
  } else {
    $prediction = 'benign';
  }
  # Replace PPH1 empirical rules-based prediction with the PPH2 ternary classification
  $cols[11] = $prediction;
  my @formatted;
  for (my $i=0; $i<@cols; $i++) {
    push @formatted, sprintf($PPH::tabformat[$i], $cols[$i]);
  }
  # Round to avoid spuriously low scores in output (e.g., 3.47e-18)
  $prob = sprintf "%.5f",  $prob;
  $fpr  = sprintf "%.5f",  $fpr;
  $tpr  = sprintf "%.5f",  $tpr;
  $fdr  = sprintf "%.5f",  $fdr;
  print
    join("\t", @formatted[0..13]),
    sprintf("\t%18s\t%10.3g\t%10.3g\t%10.3g\t%10.3g\t",
      $class, $prob, $fpr, $tpr, $fdr),
    join("\t", @formatted[14..$#formatted]);
  print "\t# $comments" if defined $comments;
  print "\n";
  $inst_ordinal++;
}
close(FH);

END {
  unlink $testfile if $testfile && -e $testfile && !$testarff;
}
